"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const pix_generator_1 = __importDefault(require("../../models/pix_generator"));
const qrcode_1 = __importDefault(require("qrcode"));
function MakePIX(props, options) {
    return __awaiter(this, void 0, void 0, function* () {
        let base64QRCode;
        const gen = new pix_generator_1.default();
        gen.setPayloadFormatIndicator();
        if (props.uniquePayment)
            gen.setPointOfInitiationMethod();
        gen.setMerchantAccountInformation(props.pixKey);
        gen.setMerchantCategoryCode(props.categoryCode);
        gen.setTransactionCurrency(props.currencyCode);
        if (props.value)
            gen.setValue(props.value);
        gen.setCountryCode(props.countryCode);
        gen.setMerchantName(props.merchantName);
        gen.setMerchantCity(props.merchantCity);
        if (props.postalCode)
            gen.setPostalCode(props.postalCode);
        gen.setAdditionalDataFieldTemplate(props.txID);
        const brCode = gen.generateBRCode();
        if (options === null || options === void 0 ? void 0 : options.generateBase64) {
            base64QRCode = yield qrcode_1.default.toDataURL(brCode);
        }
        return {
            brCode,
            base64QRCode,
        };
    });
}
exports.default = MakePIX;
