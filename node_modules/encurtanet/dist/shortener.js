"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noAds = exports.interstitialsAds = exports.EncurtaNet = void 0;
const axios_1 = __importDefault(require("axios"));
const baseUrl = "https://encurta.net/api";
const interstitialsAds = 1;
exports.interstitialsAds = interstitialsAds;
const noAds = 0;
exports.noAds = noAds;
class EncurtaNet {
    constructor(apiToken) {
        this.apiToken = apiToken;
    }
    shorten(url, alias = null, isTextFormat = false, adsType = null) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                api: this.apiToken,
                url: url
            };
            if (alias) {
                params.alias = alias;
            }
            if (isTextFormat) {
                params.format = "text";
            }
            if (adsType !== null) {
                if (adsType === interstitialsAds) {
                    params.type = interstitialsAds;
                }
                else if (adsType === noAds) {
                    params.type = noAds;
                }
                else {
                    throw new EncurtaNetError(`${adsType} is not valid ads type`);
                }
            }
            const response = yield axios_1.default.get(baseUrl, { params });
            const dataResponse = response.data;
            if (response.status !== 200) {
                throw new EncurtaNetError(`[Request Error] Status code: ${response.status}`);
            }
            if (dataResponse === "" || dataResponse.status === "error") {
                let message = dataResponse.message;
                if (Array.isArray(message)) {
                    message = message.join("");
                }
                throw new EncurtaNetError(message);
            }
            return new EncurtaNetResponse(dataResponse, isTextFormat);
        });
    }
}
exports.EncurtaNet = EncurtaNet;
class EncurtaNetError extends Error {
    constructor(message) {
        super(`EncurtaNetError(${message})`);
    }
}
class EncurtaNetResponse {
    constructor(responseContent, isTextFormat) {
        this.responseContent = responseContent;
        this.isTextFormat = isTextFormat;
    }
    get() {
        return this.responseContent;
    }
    getShortenedUrl() {
        if (this.isTextFormat) {
            throw new EncurtaNetError("It is not possible to get this data because you passed 'isTextFormat' as true");
        }
        return this.responseContent.shortenedUrl;
    }
    getStatus() {
        if (this.isTextFormat) {
            throw new EncurtaNetError("It is not possible to get this data because you passed 'isTextFormat' as true");
        }
        return this.responseContent.status;
    }
    getMessage() {
        if (this.isTextFormat) {
            throw new EncurtaNetError("It is not possible to get this data because you passed 'isTextFormat' as true");
        }
        if (Object.keys(this.responseContent).includes("message")) {
            return this.responseContent.message;
        }
        return "";
    }
}
